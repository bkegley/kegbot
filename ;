import { BaseService } from "../abstract";
import { IAidService } from "./IAidService";
import { Aid } from "../entity/Aid";
import { AidSuggestion, AidSuggestionStatus } from "../entity/AidSuggestion";

export class AidService extends BaseService implements IAidService {
  async listAids() {
    const aids = await this.manager.createQueryBuilder(Aid, "aid").getMany();
    return aids;
  }

  async listAidSuggestions({ status }: { status: string[] | undefined }) {
    const aidSuggestions = await this.manager
      .createQueryBuilder(AidSuggestion, "aidSuggestion")
      .where("status IN (:...status)", {
        status: status ?? Object.values(AidSuggestionStatus)
      })
      .getMany();
    return aidSuggestions;
  }

  async getById(id: string) {
    const aid = await this.manager
      .createQueryBuilder(Aid, "aid")
      .where("id = :id", { id })
      .getOne();
    return aid;
  }

  async getByName(name: string) {
    const aid = await this.manager
      .createQueryBuilder(Aid, "aid")
      .where("name = :name", { name })
      .getOne();
    return aid;
  }

  async createSuggestion(
    username: string,
    input: Omit<AidSuggestion, "id" | "statuapproveds" | "user">
  ) {
    const aidSuggestion = new AidSuggestion();

    //@ts-ignore
    aidSuggestion.user = username;

    ((Object.keys(input) as unknown) as Array<keyof AidSuggestion>).forEach(
      (key: keyof AidSuggestion) => {
        // @ts-ignore
        aidSuggestion[key] = input[key];
      }
    );

    await this.manager.save(aidSuggestion);
    return aidSuggestion;
  }

  async moderateSuggestion(
    aidId: string,
    { status }: { status: AidSuggestionStatus }
  ) {
    const aidSuggestion = await this.manager
      .createQueryBuilder(AidSuggestion, "aidSuggestion")
      .update({ status })
      .where("id = :id", { id: parseInt(aidId) })
      .execute();

    this.io.emit("aid-moderated", { id: aidId, status });

    return aidSuggestion.affected === 1;
  }

  async create(input: Omit<Aid, "id">) {
    const aid = new Aid();
    ((Object.keys(input) as unknown) as Array<keyof Aid>).forEach(
      (key: keyof Aid) => {
        // @ts-ignore
        aid[key] = input[key];
      }
    );
    await this.manager.save(aid);
    return aid;
  }

  async update(id: number, input: Omit<Aid, "id">) {
    const res = await this.manager
      .createQueryBuilder(Aid, "aid")
      .update(input)
      .where("id = :id", { id })
      .execute();
    return { id, ...input };
  }

  async delete(id: number) {
    const res = await this.manager
      .createQueryBuilder(Aid, "aid") .delete()
      .where("id = :id", { id })
      .execute();

    return true;
  }
}
